<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>这个Hello world不容易</title>
    <link href="/2020/04/01/Not-a-simple-hello-world/"/>
    <url>/2020/04/01/Not-a-simple-hello-world/</url>
    
    <content type="html"><![CDATA[<h3 id="缘起"><a href="#缘起" class="headerlink" title="缘起"></a>缘起</h3><p>  早在查资料和看别人的 <code>GitHub</code> 同站精美博客时，对这个 <code>Github pages</code> 心向往之已久，但碍于各种各样的原因，没去动手；现在离第一次注册 <code>GitHub</code> 时已过去一个星期，当时注册就只想着这个事，又是观望又是查些教程（见文尾参考链接），再加之本地与远程库交互，和此期间还边捣腾 <code>Git</code> 的各种命令，倒终于是有点雏形了。</p><p>  最开始看的时候，教程并不一致面向<code>GitHub Pages</code>，更多的是像<code>Gitlab、Bitbucket</code> 或是国内的<code>Gitee、coding</code>;最终还是决定目前这个，再就是选主题，也是纠结的（有点选择困难？），看了好久还是选了几个不是很复杂的，想着要是想改，看起来会轻松些… 倒是到目前为止除了封面图，什么都没开始改…</p><p>  最无语还是非线上与线下显示不一致莫属，看了好久，最开始还以为是源文件没有传到同一仓库的另一分支的问题，后面想想好像样式不显示也和它没什么关联，毕竟<code>hexo</code>编译完成的页面都在仓库的<code>master</code>分支下了；所以最有可能是未编译之前的步骤出了问题。</p><h4 id="问题的现象"><a href="#问题的现象" class="headerlink" title="问题的现象"></a>问题的现象</h4><p>本地运行良好, <code>_config.yml</code> 配置也没什么问题，为什么一用 <code>hexo d</code> 部署好，到线上一查看，什么样式都没有，直接显示成只有文章超链接，点进去还是 <code>page not found</code> ……</p><p>最重要的是还把我原来的所有commit全部都直接覆盖了……难道<code>hexo-deployer-git</code> 这个npm模块，都没有询问机制的？</p><h4 id="怎么解决的呢"><a href="#怎么解决的呢" class="headerlink" title="怎么解决的呢"></a>怎么解决的呢</h4><p>结合一些参考链接，加上自己仔细回想对这个项目修改了哪？<br>看到教程和配置脚本上的注释都说要加个子页面，而我确实修改了 <code>_config.yml</code> 里的url设置，想着把它改回来：</p><pre><code># URL## If your site is put in a subdirectory, set url as &#39;http://yoursite.com/child&#39; and root as &#39;/child/&#39;url: https://dins76.github.io/ root: /</code></pre><p>这么一改就改好了!!这还是看着参考文章改的😓可能是主题或版本问题？未求证</p><p>而改之前，导致不显示样式的设置:</p><pre><code>url: https://dins76.github.io/blog/root: /blog/</code></pre><h3 id="尝试重新搭建😭"><a href="#尝试重新搭建😭" class="headerlink" title="尝试重新搭建😭"></a>尝试重新搭建😭</h3><p>  以上本来是已经搭好了在<code>username.github.io</code>的blog，但想精简本地和远程的空间；（因为本地和远程都是两个库，本地可以只留源文件库，编译后<code>hexo d</code> 可直接推到<code>username.github.io</code>这个库）</p><p>  也是对同一仓库一直心心念念，后来直接在源文件库下直接练习<code>git</code>命令操作，导致无法用<code>hexo</code>（；´д｀）ゞ所以就打算再次编译了，还好没改动什么，只要把文章提取出来然后重新搭建一次，这一次边捣鼓边加上自动集成并部署的 <code>Github Action</code> （CI\CD概念还不是很熟悉）。</p><p>  从头开始使用<code>Hexo</code>,边记录边巩固下(因为已经安装过<code>nodejs</code>和<code>hexo</code>，这个步骤可以在网上查到)：</p><pre><code>$ hexo init blog_src    #初始化hexo配置文件夹，blog_src为任意名称INFO  Cloning hexo-starter https://github.com/hexojs/hexo-starter.gitINFO  Start blogging with Hexo!    #出现这条信息，即为成功$ cd blog_src$ hexo g    #生成本地blog$ hexo s    #本地预览INFO  Start processingINFO  Hexo is running at http://localhost:4000 . Press Ctrl+C to stop.    #输入以上网址查看没问题，开始复制以前的文章，以下**不可复制！**$ cp ~/$(username).github.io/source/_post/hello-world.md ~/blog/source/hello-world.md$ hexo clean$ hexo g &amp;&amp; hexo s    #生成后再次预览$ vim ~/blog/_config.yml #没问题后修改blog/_config.yml里的URL,见下方解决方案;还有deployment（仓库页面 Clone and Download - Use SSH 里的地址）    # Deployment    ## Docs: https://hexo.io/docs/deployment.html    deploy:      type: &#39;git&#39;      repository: git@github.com:$(username)/$(username).github.io.git      branch: master$ hexo d    #部署，在线查看效果;不过注意这个会把username.github.io仓库下的master分支直接全部覆盖！</code></pre><h4 id="Github-Action初试"><a href="#Github-Action初试" class="headerlink" title="Github Action初试"></a>Github Action初试</h4><p>  结合网上教程来看：配置好 <code>Action脚本</code>后；本地写好文章，<code>git push</code> 进github，<code>Github Action</code> 检测到有变动，之前在本地输入 <code>hexo cl &amp;&amp; hexo g &amp;&amp; hexo d</code> 的命令直接在github上运行，然后直接部署到<code>Github pages</code> 上。</p><p>  所以我的理解是：配置好<code>Github Action</code>后，只要<code>git push</code> ，在上传完后稍等一会；然后浏览器输入 <code>username.github.io</code> 就可以看到，push上去的文章了；在本地除了用Markdown写文章，其它的都不用管了。</p><h5 id="新建空库"><a href="#新建空库" class="headerlink" title="新建空库"></a>新建空库</h5><p>  先在Github上新建一个仓库，用于存放hexo init生成的源代码；username.github.io是hexo d推送的public/下的所有文件。<br>  本地把源代码生成的文件夹，改成与刚健的Github一致，然后初始化：</p><pre><code>$ git init    #如果新建的GitHub生成了README文件，或自己添加了其它文件:$ git pull origin master --allow-unrelated-histories    #如果是空库，直接使用$ git remote add origin git@github.com:$(username)/$(Github_Pages_src)$ git add --all$ git commit -m &quot;upload src file&quot;$ git push -u origin master    #即可完成远程与本地同步</code></pre><h5 id="配置库和SSH-key"><a href="#配置库和SSH-key" class="headerlink" title="配置库和SSH key"></a>配置库和SSH key</h5><p>  本地生成ssh key用于Action访问：</p><pre><code>ssh-keygen -t rsa -b 4096 -f ~/.ssh/github-actions-deploy</code></pre><p>  以上生成了一对key：后缀为<code>.pub</code>称为公钥，无后缀的为私钥；</p><ol><li>在 Github Pages 的仓库，<strong>Settings -&gt; Deploy keys</strong> 添加刚刚生成的公钥，名称随意，但要勾选 <strong>Allow write access</strong> ；</li><li>在新仓库的 <strong>Settings -&gt; Secrets</strong> 里添加刚刚生成的私钥，名称自己能记住是什么意思就行。</li></ol><h5 id="源码仓库添加-Actions-配置"><a href="#源码仓库添加-Actions-配置" class="headerlink" title="源码仓库添加 Actions 配置"></a>源码仓库添加 Actions 配置</h5><p>  如果在网页编辑配置文件的话，选择 <code>Set up a workflow yourself</code> ;如果是在本地目录提交配置文件的话，将配置文件存至 .github/workflows/<em>任意名</em>.yml。</p><p>  还是根据以下参考改吧，我自己写的总是<code>paser error</code> ，可能和YAML语法对空格 <code>Tab键</code> 比较严格，就像 <code>Makefile</code> 对 <code>Tab</code> 和空格严格一样。</p><p>具体参考：</p><ul><li><a href="https://xiaopc.org/2019/08/29/github-actions-%E6%B5%8B%E8%AF%95-%E8%87%AA%E5%8A%A8%E9%83%A8%E7%BD%B2-hexo/" target="_blank" rel="noopener">Github Actions 测试 - 自动部署 Hexo</a></li><li><a href="http://www.ruanyifeng.com/blog/2019/09/getting-started-with-github-actions.html" target="_blank" rel="noopener">GitHub Actions 入门教程</a></li><li><a href="https://help.github.com/cn/actions/configuring-and-managing-workflows/configuring-a-workflow" target="_blank" rel="noopener">configuring-a-workflow</a></li></ul><p>但注意：</p><ol><li>更改git的 <code>user.name</code> 和 <code>user.email</code>!!</li><li>亲测，根据以上配置还有一个错误是： <code>ERROR Deployer not found: git</code><br>这个是没有安装<code>hexo-deployer-git</code>库，在安装hexo后加上：<pre><code>       # install dependencies       npm i -g hexo-cli       npm i       # install hexo-deployer-git       npm install --save hexo-deployer-git</code></pre>我写的改动很少，详见<a href="https://github.com/DIns76/Github_Pages_src/blob/master/.github/workflows/build_and_update_gh_Pages.yml" target="_blank" rel="noopener">github链接</a></li></ol><h3 id="为什么不能放一个库？"><a href="#为什么不能放一个库？" class="headerlink" title="为什么不能放一个库？"></a>为什么不能放一个库？</h3><p>  上面折腾完了，又想明明是同一个项目的文件（源文件和hexo编译生成文件），为什么得用两个库？</p><p>  所以开始尝试用同一个库，用两个分支：</p><ul><li><code>master</code>：存放hexo生成文件；我默认是<code>hexo d</code>直接推送到<code>usernaem.github.io</code>这个仓库的master分支；把它放其它的分支估计要改些hexo的配置？？没折腾过；</li><li><code>gh-pages-source</code>：存放hexo编译之前的源文件，也就是<code>GitHub Pages</code>的源文件；</li></ul><p>见如下命令注释：</p><pre><code>$ git clone git@github.com:$(username)/$(username).github.io.git# clone下hexo部署使用的仓库，然后切进去$ cd $(username)/$ git checkout -b gh-pages-source    #生成并切换到本地新分支$ cp -r ~/$(gh-pages-src)/* ./    #复制所有文件到当前文件夹，记得复制./github/ !!!$ vim .github/workflow/$(any name).yml</code></pre><p>记得在<code>./github/workflow/$(any name).yml</code>里把触发条件修改成<code>gh-pages-source</code>触发!详见此<a href="https://github.com/DIns76/Dins76.github.io/blob/gh-pages-source/.github/workflows/build_and_update_gh_Pages.yml" target="_blank" rel="noopener">GitHub链接</a></p><pre><code>$ git add --all$ git commit -m &quot;same repo test&quot;$ git push origin HEAD:gh-pages-source#我这是之前建过，所以使用这个命令；如果远程只有master，使用下面这条$ git push origin gh-pages-source</code></pre><h4 id="推上去后发现一个问题"><a href="#推上去后发现一个问题" class="headerlink" title="推上去后发现一个问题"></a>推上去后发现一个问题</h4><pre><code>Warning: Permanently added the RSA host key for IP address &#39;***.***.113.4&#39; to the list of known hosts.Load key &quot;/home/runner/.ssh/id_rsa&quot;: invalid formatgit@github.com: Permission denied (publickey).fatal: Could not read from remote repository.Please make sure you have the correct access rightsand the repository exists.FATAL Something&#39;s wrong. Maybe you can find the solution here: https://hexo.io/docs/troubleshooting.htmlError: Spawn failed    at ChildProcess.task.on.code (/home/runner/work/Dins76.github.io/Dins76.github.io/node_modules/hexo-util/lib/spawn.js:51:21)    at ChildProcess.emit (events.js:198:13)    at Process.ChildProcess._handle.onexit (internal/child_process.js:248:12)##[error]Process completed with exit code 2.</code></pre><p>  log来自<code>Github Action</code>的编译，点击Action按钮或是点击仓库文件列表右上角的最近一次commit，有显示 √ 或 ×，点Details即可。<br>  日志第二、三行显示是权限不够，就是<code>Github Action</code> 操作时推送到master是需要权限的，把上面ssh生成的private key添加进<code>username.github.io</code>这个库中，添加方法与上方一致。然后再<code>push</code>一次即可。</p><p>  然后就可以把本地的hexo源文件库删掉啦，远程也就是Github上的可以删除，不过还是推荐 <code>Archived</code> 当作备份！！</p><p>  怎么方便怎么操作，到时候本地源文件受损，可以复制上段提到的归档仓库或者用下方命令进行单一分支复制都可（或者本地也用这条命令，直接保存<code>gh-pages-source</code>分支，也就是<strong>源文件！！</strong>）</p><pre><code>$ git clone -b $(git_branch_name) --single-branch $(git_repo_url)</code></pre><h3 id="下一步？"><a href="#下一步？" class="headerlink" title="下一步？"></a>下一步？</h3><ol><li>尝试修改主题中的图和显示字体，字体看起来有点虚,可能加粗点可能会更好</li><li><del>尝试把非public/下的所有的文件都传到GitHub上</del></li><li><del>尝试<code>Travis CI</code>自动部署,或者直接尝试<code>Github Action</code></del></li><li>继续学习 <code>Markdown</code> 语法用于写作；<ul><li>或尝试其它支持github pages的编辑器，每次都要到<code>source/_post/</code>下去新建，有点累</li><li>尝试在线编辑器？</li><li><a href="https://guides.github.com/features/mastering-markdown/" target="_blank" rel="noopener">Mastering Markdown</a></li></ul></li><li>继续学习 <code>Git</code> 使用<ul><li>了解git历史<a href="https://www.atlassian.com/git/articles/10-years-of-git" target="_blank" rel="noopener">10 years of git by atlassian</a></li><li><a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">Pro Git_cn</a></li><li><a href="https://www.ruanyifeng.com/blog/2015/12/git-cheat-sheet.html" target="_blank" rel="noopener">常用 Git 命令清单</a></li></ul></li></ol><h3 id="个人觉得简介明了的主题："><a href="#个人觉得简介明了的主题：" class="headerlink" title="个人觉得简介明了的主题："></a>个人觉得简介明了的主题：</h3><p>目前使用的主题<a href="https://github.com/fluid-dev/hexo-theme-fluid" target="_blank" rel="noopener">hexo-theme-fluid</a><br>其它主题：</p><ol><li><a href="https://wa-ri.github.io/" target="_blank" rel="noopener">Zcc’s blog</a></li><li><a href="https://github.com/TonyChenn/mdm" target="_blank" rel="noopener">MaterialDesign风格主题 MDM</a></li><li><a href="https://github.com/yk-liu/PointingToTheMoon" target="_blank" rel="noopener">PointingToTheMoon</a></li><li><a href="https://github.com/yscoder/hexo-theme-indigo" target="_blank" rel="noopener">hexo-theme-material-indigo</a></li><li><a href="https://gythialy.github.io/deploy-hexo-to-github-pages-via-github-actions/" target="_blank" rel="noopener">这个Next主题的背景动效有点意思</a></li><li><a href="https://github.com/DIns76/scribble" target="_blank" rel="noopener">极简主题scribble</a></li><li><a href="https://github.com/DIns76/jasper2" target="_blank" rel="noopener">两色主题Ghost’s Casper // Jasper2</a></li></ol><h3 id="其它参考链接"><a href="#其它参考链接" class="headerlink" title="其它参考链接"></a>其它参考链接</h3><ul><li><a href="https://jerryc.me/posts/74006f42/#Travis-CI" target="_blank" rel="noopener">通過travis-ci或者GitHub Actions自動化部署GitHub Pages和Coding Pages</a></li><li><a href="https://hexo.io/zh-cn/docs/commands" target="_blank" rel="noopener">Hexo指令</a></li><li><a href="http://beiyuu.com/why-blog" target="_blank" rel="noopener">我为什么写博客？</a></li><li><a href="http://beiyuu.com/github-pages" target="_blank" rel="noopener">使用Github Pages建独立博客</a></li><li><a href="https://www.liaoxuefeng.com/wiki/896043488029600/900388704535136" target="_blank" rel="noopener">Bug分支</a></li><li><a href="https://blog.csdn.net/wudinaniya/article/details/77508229" target="_blank" rel="noopener">删除github中某个文件</a></li><li><a href="https://code004.ml/posts/how-to-build-a-hexo-blog/" target="_blank" rel="noopener">Hexo博客搭建</a></li><li><a href="https://zhuanlan.zhihu.com/p/60578464" target="_blank" rel="noopener"> Hexo+GitHub 搭建</a></li><li><a href="https://sspai.com/post/54608" target="_blank" rel="noopener">sspai</a></li><li><a href="https://kuleyu.github.io/hexolog/post/31808.html" target="_blank" rel="noopener">ref about netify</a></li></ul><p>向以上所有文章作者和开源项目贡献者：</p><p><strong>致谢！！</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>Hexo</tag>
      
      <tag>blog</tag>
      
      <tag>Github Pages</tag>
      
      <tag>Github Action</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
